type_expressions:
    | ','.expression+ ',' '*' expression 
    | '*' expression 
    | ','.expression+

statements: statement+

simple_stmt:
    | small_stmt !';' NEWLINE  # Not needed, there for speedup
    | ';'.small_stmt+ [';'] NEWLINE

small_stmt:
    | assignment
    | return_stmt 
    | 'break' 
    | 'continue' 
compound_stmt:
    | function_def
    | if_stmt
    | for_stmt
    | while_stmt

assignment:
    | NAME ':' expression ['=' annotated_rhs ]

if_stmt:
    | 'if' named_expression ':' block elseif_stmt 
    | 'if' named_expression ':' block [else_block] 
elseif_stmt:
    | 'elseif' named_expression ':' block elseif_stmt 
    | 'elseif' named_expression ':' block [else_block] 
else_block: 'else' ':' block

while_stmt:
    | 'while' named_expression ':' block [else_block] 

for_stmt:
    | 'for' star_targets 'in' ~ star_expressions ':' [TYPE_COMMENT] block [else_block] 

return_stmt:
    | 'return' [star_expressions]
function_def:
    | function_def_raw

function_def_raw:
    | 'def' NAME '(' [parameters] ')' ':'  indented block
    | TYPE_COMMENT

parameters:
    | param_no_default+ 

param_no_default:
    | param ',' TYPE_COMMENT? 
    | param TYPE_COMMENT? &')' 

param: NAME annotation?

block:
    | NEWLINE INDENT statements DEDENT 
    | simple_stmt


expressions:
    | expression (',' expression )+ [','] 
    | expression ',' 
    | expression
expression:
    | disjunction 'if' disjunction 'else' expression 
    | disjunction
disjunction:
    | conjunction ('or' conjunction )+ 
    | conjunction
conjunction:
    | inversion ('and' inversion )+ 
    | inversion
inversion:
    | 'not' inversion 
    | comparison
comparison:
    | bitwise_or compare_op_bitwise_or_pair+ 
    | bitwise_or

compare_op_bitwise_or_pair:
    | eq_bitwise_or
    | noteq_bitwise_or
    | lte_bitwise_or
    | lt_bitwise_or
    | gte_bitwise_or
    | gt_bitwise_or

eq_bitwise_or: '==' bitwise_or 
noteq_bitwise_or:
    | ('!=' ) bitwise_or 
lte_bitwise_or: '<=' bitwise_or 
lt_bitwise_or: '<' bitwise_or 
gte_bitwise_or: '>=' bitwise_or 
gt_bitwise_or: '>' bitwise_or 

bitwise_or:
    | bitwise_or '|' bitwise_xor 
    | bitwise_xor
bitwise_xor:
    | bitwise_xor '^' bitwise_and 
    | bitwise_and
bitwise_and:
    | bitwise_and '&' shift_expr 
    | shift_expr

shift_expr:
    | shift_expr '<<' sum 
    | shift_expr '>>' sum 
    | sum


sum:
    | sum '+' term 
    | sum '-' term 
    | term
term:
    | term '*' factor 
    | term '/' factor 
    | term '%' factor 
    | factor
factor:
    | '+' factor 
    | '-' factor 

atom:
    | NAME
    | 'True' 
    | 'False' 
    | 'None' 
    | strings
    | NUMBER
    | list 

list:
    | '[' [star_named_expressions] ']'

star_named_expressions: ','.star_named_expression+ [','] 
star_named_expression:
    | named_expression
named_expression:
    | expression !':='



strings: STRING+

arguments:
    | args [','] &')' 
args:
    | ','.(starred_expression | named_expression !'=')

